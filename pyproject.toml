[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "autojob"
description = "tools for automating job creation and management for DFT calculations"
readme = "README.rst"
requires-python = ">=3.10"
license = "BSD-3-Clause"
dynamic = ["version"]
keywords = ["dft", "hpc", "automation", "matter modeling"]
authors = [
  { name = "Ugochukwu Nwosu", email = "ugognw@gmail.com" },
]
classifiers = [
  "Development Status :: 3 - Alpha",
  "Framework :: Sphinx",
  "Intended Audience :: Science/Research",
  "License :: OSI Approved :: BSD License",
  "Natural Language :: English",
  "Operating System :: Unix",
  "Operating System :: POSIX",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: Implementation :: CPython",
  "Topic :: Scientific/Engineering :: Chemistry",
  "Topic :: Scientific/Engineering :: Physics",
]
dependencies = [
  "ase @ git+https://gitlab.com/ase/ase.git@02b7d6f2395d689476c1c71b15f1a9349032d25a",  # 2023-12-03
  "comp-chem-utils>=0.0.4",
  "emmet-core>=0.68.0",  # data validation
  "numpy>=1.23.1",
  "monty>=2022.4.26",
  "shortuuid>=1.0.9",
  "pymatgen>=2022.9.8",
  "click>=8.1.3",
  "Jinja2>=3.1.2",
  "pydantic>=2.5.0",  # required to use env_ignore_empty
  "pydantic_settings>=2.0",
  "cclib",
]

[project.scripts]
autojob = "autojob.cli.main:main"
restart-relaxation = "autojob.cli.restart_relaxation:main"
run-vibration = "autojob.cli.run_vibration:main"

[project.urls]
Changelog = "https://gitlab.com/ugognw/python-autojob/-/blob/main/CHANGELOG.rst?ref_type=heads"
Documentation = "https://python-autojob.readthedocs.io/"
Issues = "https://gitlab.com/ugognw/python-autojob/-/issues"
Source = "https://gitlab.com/ugognw/python-autojob"

[tool.black]
target-version = ["py310", "py311", "py312"]
line-length = 79
skip-string-normalization = true

[tool.coverage.run]
branch = true
parallel = true

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

[tool.hatch.envs.default]
dependencies = [
  "black==23.11.0",
  "mypy==1.8.0",
  "pytest==7.4.3",
  "pytest-cov==4.1.0",
  "pytest-datadir==1.5.0",
  "pytest-xdist==3.5.0",
  "ruff==0.1.9",
  "sphinx==7.2.6",
  "furo==2023.9.10",
]
python = "3.11"

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "pytest -n auto --cov-branch --cov=src/autojob --cov-report=html --cov-report=lcov --cov-report=xml --cov-report=term-missing {args:tests/}"

[tool.hatch.envs.docs]
dependencies = [
  "sphinx==7.2.6",
  "furo==2023.9.10",
]
detached = true

[tool.hatch.envs.docs.scripts]
build-html = "sphinx-build -b html docs/source {args:docs/build/html/}"
clean = "rm -rf docs/build"
doctest = "sphinx-build -b doctest docs/source {args:docs/build/doctest/}"
linkcheck = "sphinx-build -b linkcheck docs/source {args:docs/build/linkcheck/}"
all = [
  "doctest",
  "linkcheck",
  "build-html",
]

[tool.hatch.envs.lint]
detached = true
dependencies = [
  "black==23.11.0",
  "mypy==1.8.0",
  "ruff==0.1.9",
]
python = "3.11"

[tool.hatch.envs.lint.scripts]
typing = "mypy --strict --install-types --non-interactive src/autojob/ tests/"
style = [
  "ruff {args:.}",
  "black --check --diff {args:.}",
]
fmt = [
  "black {args:.}",
  "ruff --fix {args:.}",
  "style",
]
all = [
  "style",
  "typing",
]

[tool.hatch.envs.test]
dependencies = [
  "pytest==7.4.3",
  "pytest-cov==4.1.0",
  "pytest-datadir==1.5.0",
  "pytest-xdist==3.5.0",
]

[[tool.hatch.envs.test.matrix]]
python = [
  "3.10",
  "3.11",
  "3.12",
]

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.version]
path = "src/autojob/__about__.py"

[tool.mypy]
exclude = [
  ".*gui/.*",
  "src/autojob/.*coordinator.py",
  "src/autojob/auditor/.*"
]

[[tool.mypy.overrides]]
module = "pymatgen"
ignore_missing_imports = true

[tool.pytest.ini_options]
addopts = [
  "-n",
  "auto",
  "--import-mode=importlib",
  "-r A",
  "--strict-markers",
  "--doctest-modules",
  "--doctest-glob=*.rst",
  "--tb=short",
]
filterwarnings =[
  "error",
  "ignore:No POTCAR file with matching TITEL fields*:UserWarning",
  "ignore:.*`general_plain_validator_function` is deprecated, use `with_info_plain_validator_function` instead.*:DeprecationWarning:monty.json",
  "ignore:.*`general_plain_validator_function` is deprecated, use `with_info_plain_validator_function` instead.*:DeprecationWarning:pydantic_core.core_schema",
  "ignore:.*`pydantic.config.Extra` is deprecated.*:pydantic.warnings.PydanticDeprecatedSince20:emmet.core.vasp.calculation",
]
markers = [
  "input_files: specify the input files with which to populate a directory; for use with the populate_inputs fixture (deselect with '-m \"not input_files\"')",
  "output_files: specify the output files with which to populate a directory; for use with the populate_outputs fixture (deselect with '-m \"not output_files\"')",
  "heavy: mark a test as heavy/requiring a lot of resources (deselect with '-m \"not heavy\"')",
  "slow: mark a test as slow (deselect with '-m \"not slow\"')",
]
norecursedirs = "migrations"
python_files = [
  "test_*.py",
  "*_test.py",
  "tests.py"
]
testpaths = ["tests"]

[tool.ruff]
target-version = "py310"
line-length = 79
select = [
  "A",
  "ARG",
  "B",
  "C",
  "C4",
  "DTZ",
  "E",
  "EM",
  "EXE",
  "F",
  "FBT",
  "I",
  "ICN",
  "INT",
  "ISC",
  "N",
  "PIE",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "PT",
  "PTH",
  "Q",
  "RSE",
  "RUF",
  "S",
  "SIM",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105", "S106", "S107", "S603",
  # Ignore complexity
  "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["E402"]  # allow module-import-not-at-top-of-file
"**/{tests,docs,tools}/*" = ["E402"]  # allow module-import-not-at-top-of-file
"**/tests/*" = ["S101"]  # allow assert

[tool.ruff.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false

[tool.ruff.flake8-quotes]
inline-quotes = "double"

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.isort]
known-first-party = ["autojob"]

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]
