[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "{{ cookiecutter.distribution_name }}"
description = "{{ cookiecutter.project_short_description }}"
readme = "README.rst"
requires-python = ">=3.10"
license = "{{ cookiecutter.license }}"
dynamic = ["version"]
keywords = [
{%- if cookiecutter.keywords | trim != '' %}
    {%- for keyword in cookiecutter.keywords.split(',') %}
    "{{ keyword }}",
    {%- endfor %}
{%- endif %}
]
authors = [
  { name = "{{ cookiecutter.full_name }}", email = "{{ cookiecutter.email }}" },
]
classifiers = [
        # complete classifier list: http://pypi.python.org/pypi?%3Aaction=list_classifiers
  "Development Status :: 1 - Planning",
  "Intended Audience :: Science/Research",
{%- if cookiecutter.license == "no" %}
{%- elif cookiecutter.license in ["BSD 2-Clause License", "BSD 3-Clause License"] %}
    "License :: OSI Approved :: BSD License",
{%- elif cookiecutter.license == "MIT license" %}
    "License :: OSI Approved :: MIT License",
{%- elif cookiecutter.license == "ISC license" %}
    "License :: OSI Approved :: ISC License (ISCL)",
{%- elif cookiecutter.license == "Apache Software License 2.0" %}
    "License :: OSI Approved :: Apache Software License",
{%- elif "LGPLv3+" in cookiecutter.license %}
    "License :: OSI Approved :: GNU Lesser General Public License v3 or later (LGPLv3+)"
{%- elif "LGPLv3" in cookiecutter.license %}
    "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)"
{%- elif "LGPLv2" in cookiecutter.license %}
    "License :: OSI Approved :: GNU Lesser General Public License v2 or later (LGPLv2+)"
{%- elif "LGPLv2" in cookiecutter.license %}
    "License :: OSI Approved :: GNU Lesser General Public License v2 (LGPLv2)"
{%- endif %}
    "Operating System :: Unix",
    "Operating System :: POSIX",
    "Operating System :: Microsoft :: Windows",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation :: CPython",
{%- if cookiecutter.pypi_disable_upload == "yes" %}
    "Private :: Do Not Upload",
{%- endif %}
{%- if cookiecutter.chemistry_related == "yes" %}
  "Topic :: Scientific/Engineering :: Chemistry",
{%- endif %}
{%- if cookiecutter.physics_related == "yes" %}
  "Topic :: Scientific/Engineering :: Physics",
{%- endif %}
]
dependencies = []
{%- if cookiecutter.command_line_interface != "no" %}

[project.scripts]
{{ cookiecutter.cli_bin_name }} = '{{ cookiecutter.package_name }}.cli:main'
{%- endif %}

[project.urls]
Issues = "{{ cookiecutter.__repo_url }}/issues"
Source = "{{ cookiecutter.__repo_url }}"

[tool.coverage.run]
branch = true
parallel = true

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

[tool.hatch.envs.default]
dependencies = [
  "mypy==1.8.0",
  "pytest==7.4.3",
  "pytest-cov==4.1.0",
{%- if cookiecutter.pytest_datadir == "yes" %}
  "pytest-datadir==1.5.0",
{%- endif %}
{%- if cookiecutter.pytest_datadir == "yes" %}
  "pytest-xdist==3.5.0",
{%- endif %}
  "ruff==0.4.8",
]
python = "3.11"

[tool.hatch.envs.default.scripts]
test = "pytest {args:tests}"
test-cov = "pytest{{ %- if cookiecutter.pytest_datadir == "yes" %}} -n auto{%- endif %} --cov-branch --cov=src/{{ cookiecutter.package_name }} --cov-report=html --cov-report=lcov --cov-report=xml --cov-report=term-missing {args:tests/}"

[tool.hatch.envs.test]
dependencies = [
  "pytest==7.4.3",
  "pytest-cov==4.1.0",
{ %- if cookiecutter.pytest_datadir == "yes" %}
  "pytest-datadir==1.5.0",
{%- endif %}
{ %- if cookiecutter.pytest_datadir == "yes" %}
  "pytest-xdist==3.5.0",
{%- endif %}
]

[[tool.hatch.envs.test.matrix]]
python = [
  "3.10",
  "3.11",
  "3.12",
]

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.version]
path = "src/{{ cookiecutter.package_name }}/__about__.py"

[tool.pytest.ini_options]
addopts = [
  "-n",
  "auto",
  "--import-mode=importlib",
  "-r A",
  "--strict-markers",
  "--doctest-modules",
  "--doctest-glob=*.rst",
  "--tb=short",
]
filterwarnings =[
  "error",
]
markers = []
norecursedirs = "migrations"
python_files = [
  "test_*.py",
  "*_test.py",
  "tests.py"
]
testpaths = ["tests"]

[tool.ruff]
target-version = "py310"
line-length = 79
select = [
  "A",
  "ARG",
  "B",
  "C",
  "C4",
  "DTZ",
  "E",
  "EM",
  "EXE",
  "F",
  "FBT",
  "I",
  "ICN",
  "INT",
  "ISC",
  "N",
  "PIE",
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  "PT",
  "PTH",
  "Q",
  "RSE",
  "RUF",
  "S",
  "SIM",
  "T",
  "TID",
  "UP",
  "W",
  "YTT",
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105", "S106", "S107", "S603",
  # Ignore complexity
  "C901", "PLR0911", "PLR0912", "PLR0913", "PLR0915",
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["E402"]  # allow module-import-not-at-top-of-file
"**/{tests,docs,tools}/*" = ["E402"]  # allow module-import-not-at-top-of-file
"**/tests/*" = ["S101"]  # allow assert

[tool.ruff.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false

[tool.ruff.flake8-quotes]
inline-quotes = "double"

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.isort]
known-first-party = ["{{ cookiecutter.package_name }}"]

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]
